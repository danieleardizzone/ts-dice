*,
*::before,
*::after {
    box-sizing: border-box;
}

* {
    margin: 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    height: 100vh;

    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 150px;
}

.scene {
    width: 200px;
    height: 200px;
    perspective: 600px;
    /* perspective definisce la distanza tra l'osservatore e il piano z=0 di un elemento, conferendo una sensazione di profondità tridimensionale agli elementi figli trasformati */

    /* padding: 500px 0; */

    .dice {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
        /* l'utilizzo di transform-style: preserve-3d consente di mantenere l'integrità delle trasformazioni tridimensionali degli elementi figli, permettendo la creazione di animazioni e strutture 3D più realistiche e coinvolgenti. */

        .dice_face {
            position: absolute;
            width: 200px;
            height: 200px;
            /* in questo modo permettiamo alle nostre dice_face di essere sovrapposte una sopra l'altra (prima del transform delle singole dicefaces) */

            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #fefaef;
            box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);
            border-radius: 6px;

            /* adesso andiamo a ruotate le nostre dice faces nel piano 3d con rotate per ruotarle e translatez per spostarle dal centro del cubo */

            &.dice_face-1 {
                transform: rotate3d(0, 1, 0, 0) translateZ(100px);

                .center-dot {
                    background-color: #b22525;
                }
            }

            &.dice_face-2 {
                transform: rotate3d(1, 0, 0, 90deg) translateZ(100px);
            }

            &.dice_face-3 {
                transform: rotate3d(0, 1, 0, -90deg) translateZ(100px);
            }

            &.dice_face-4 {
                transform: rotate3d(0, 1, 0, 90deg) translateZ(100px);
            }

            &.dice_face-5 {
                transform: rotate3d(1, 0, 0, -90deg) translateZ(100px);
            }

            &.dice_face-6 {
                transform: rotate3d(0, 1, 0, 180deg) translateZ(100px);
            }

            [class$=-dot] {
                width: 18%;
                height: 18%;
                border-radius: 100%;
                background-color: #2b2b2b;
                box-shadow: inset 0 0 5px rgba(0, 0, 0, 0.3);

                position: absolute;

                [class^=top]& {
                    top: 15%;
                }

                [class^=bottom]& {
                    bottom: 15%;
                }

                [class*=left]& {
                    left: 15%;
                }

                [class*=right]& {
                    right: 15%;
                }

            }

        }

    }

}

button#roll {
    border: none;
    background-color: #b22525;
    color: #fefaef;
    cursor: pointer;

    padding: 15px 30px;
    border-radius: 24px;
    box-shadow: 5px 5px 10px #b22525;

    font-size: large;
    font-weight: bold;

    &:hover {
        background-color: #871c1c;
    }
}