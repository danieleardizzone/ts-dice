*,
*::before,
*::after {
    box-sizing: border-box;
}

* {
    margin: 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;

    display: flex;
    justify-content: center;
}

.scene {
    width: 200px;
    height: 200px;
    perspective: 600px;
    /* perspective definisce la distanza tra l'osservatore e il piano z=0 di un elemento, conferendo una sensazione di profondità tridimensionale agli elementi figli trasformati */

    padding: 500px 0;

    .cube {
        width: 100%;
        height: 100%;
        position: relative;
        transform-style: preserve-3d;
        /* l'utilizzo di transform-style: preserve-3d consente di mantenere l'integrità delle trasformazioni tridimensionali degli elementi figli, permettendo la creazione di animazioni e strutture 3D più realistiche e coinvolgenti. */

        animation: shuffle 1s infinite ease-out;

        .cube_face {
            position: absolute;
            width: 200px;
            height: 200px;
            /* in questo modo permettiamo alle nostre cube_face di essere sovrapposte una sopra l'altra (prima del transform delle singole cubefaces) */

            display: flex;
            justify-content: center;
            align-items: center;
            border: 1px solid black;
            background-color: aquamarine;
            opacity: 0.5;

            /* adesso andiamo a ruotate le nostre cube faces nel piano 3d con rotate per ruotarle e translatez per spostarle dal centro del cubo */

            &.cube_face-front {
                transform: rotate3d(0, 1, 0, 0) translateZ(100px);
            }

            &.cube_face-right {
                transform: rotate3d(0, 1, 0, 90deg) translateZ(100px);
            }

            &.cube_face-back {
                transform: rotate3d(0, 1, 0, 180deg) translateZ(100px);
            }

            &.cube_face-left {
                transform: rotate3d(0, 1, 0, -90deg) translateZ(100px);
            }

            &.cube_face-top {
                transform: rotate3d(1, 0, 0, 90deg) translateZ(100px);
            }

            &.cube_face-bottom {
                transform: rotate3d(1, 0, 0, -90deg) translateZ(100px);
            }
        }

    }

}

@keyframes shuffle {
    from {
        transform: rotateX(0deg) rotateY(0deg);
    }

    to {
        transform: rotateX(360deg) rotateY(360deg);
    }
}